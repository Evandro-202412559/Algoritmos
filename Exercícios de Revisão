import random

# Criar uma lista com 10 números inteiros aleatórios entre 1 e 100
numeros = [random.randint(1, 100) for _ in range(10)]
__________________________________________________________
# Imprimir a lista gerada
print("Lista de números:", numeros)

# Encontrar o maior e o menor número da lista
maior_numero = max(numeros)
menor_numero = min(numeros)

# Imprimir o maior e o menor número
print("Maior número:", maior_numero)
print("Menor número:", menor_numero)
____________________________________________
# Criar uma lista vazia para armazenar os nomes das frutas
frutas = []

# Receber 5 nomes de frutas do usuário
for i in range(5):
    fruta = input(f"Digite o nome da fruta {i+1}: ")
    frutas.append(fruta)

# Exibir a lista de frutas
print("\nLista de frutas cadastradas:", frutas)

# Pedir ao usuário que informe uma fruta para verificar se está na lista
fruta_verificar = input("Digite o nome da fruta que você quer verificar: ")

# Verificar se a fruta está na lista
if fruta_verificar in frutas:
    print(f"A fruta {fruta_verificar} está na lista!")
else:
    print(f"A fruta {fruta_verificar} NÃO está na lista.")
________________________________________________________________
def calcular_media(numeros):
    soma = sum(numeros)
    quantidade = len(numeros)
    media = soma / quantidade
    return media

# Lista de 10 elementos numéricos
numeros = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

# Chamar a função para calcular a média e exibir o resultado
media = calcular_media(numeros)
print(f"A média dos números na lista é: {media:.0f}")
_____________________________________________________________

# Lista de listas contendo nome, idade e cidade
pessoas = [
    ["Thalita", 32, "Rio de Janeiro"],
    ["Carlos", 40, "São Paulo"],
    ["Sônia", 65, "Paraiba"],
    ["João", 40, "Porto Alegre"],
    ["Laura", 30, "Curitiba"]
]

# Imprimir as informações no formato desejado
for pessoa in pessoas:
    nome = pessoa[0]
    idade = pessoa[1]
    cidade = pessoa[2]
    print(f"Nome: {nome}, Idade: {idade}, Cidade: {cidade}")
___________________________________________________________________________

# Criar um dicionário com os dias da semana como chaves
dias_da_semana = {
    'Segunda-feira': 0,
    'Terça-feira': 0,
    'Quarta-feira': 0,
    'Quinta-feira': 0,
    'Sexta-feira': 0,
    'Sábado': 0,
    'Domingo': 0
}

# Solicitar ao usuário que insira as horas trabalhadas em cada dia
for dia in dias_da_semana:
    horas = int(input(f"Digite as horas trabalhadas em {dia}: "))
    dias_da_semana[dia] = horas

# Calcular o total de horas trabalhadas na semana
total_horas = sum(dias_da_semana.values())

# Exibir o total de horas trabalhadas
print(f"Total de horas trabalhadas na semana: {total_horas}")
______________________________________________________________________

# Criar um dicionário com os nomes dos alunos e suas respectivas notas
alunos_notas = {
    'João': 8.5,
    'Maria': 9.0,
    'Pedro': 7.0,
    'Ana': 8.0,
    'Lucas': 6.5
}

# Função para consultar a nota de um aluno
def consultar_nota(aluno):
    if aluno in alunos_notas:
        print(f"A nota de {aluno} é: {alunos_notas[aluno]}")
    else:
        print(f"Aluno {aluno} não encontrado.")

# Função para atualizar a nota de um aluno
def atualizar_nota(aluno, nova_nota):
    if aluno in alunos_notas:
        alunos_notas[aluno] = nova_nota
        print(f"Nota de {aluno} atualizada para: {nova_nota}")
    else:
        print(f"Aluno {aluno} não encontrado.")

# Menu para o usuário escolher a ação
while True:
    print("\nMENU")
    print("1 - Consultar nota de aluno")
    print("2 - Atualizar nota de aluno")
    print("3 - Sair")
    
    opcao = input("Escolha uma opção: ")
    
    if opcao == '1':
        nome = input("Digite o nome do aluno: ")
        consultar_nota(nome)
        
    elif opcao == '2':
        nome = input("Digite o nome do aluno: ")
        nova_nota = float(input("Digite a nova nota: "))
        atualizar_nota(nome, nova_nota)
    
    elif opcao == '3':
        print("Saindo do programa.")
        break
    
    else:
        print("Opção inválida, tente novamente.")
____________________________________________________________________


# Dicionário de produtos e suas quantidades em estoque
estoque_produtos = {
    'Teclado': 50,
    'Mouse': 30,
    'Monitor': 15,
    'Impressora': 10,
    'Webcam': 25
}

# Função para verificar o estoque de um produto
def verificar_estoque(produto):
    if produto in estoque_produtos:
        print(f"O produto '{produto}' tem {estoque_produtos[produto]} unidades em estoque.")
    else:
        print(f"O produto '{produto}' não está disponível no estoque.")

# Menu para o usuário verificar o estoque de um produto
while True:
    print("\nMENU")
    print("1 - Verificar estoque de um produto")
    print("2 - Sair")
    
    opcao = input("Escolha uma opção: ")
    
    if opcao == '1':
        nome_produto = input("Digite o nome do produto: ")
        verificar_estoque(nome_produto)
        
    elif opcao == '2':
        print("Saindo do programa.")
        break
    
    else:
        print("Opção inválida, tente novamente.")
________________________________________________________________

# Listas de países e suas capitais
paises = ['Brasil', 'Argentina', 'Estados Unidos', 'França', 'Japão']
capitais = ['Brasília', 'Buenos Aires', 'Washington, D.C.', 'Paris', 'Tóquio']

# Convertendo as listas em um dicionário
dicionario_paises_capitais = dict(zip(paises, capitais))

# Exibindo o dicionário
print("Dicionário de países e capitais:")
for pais, capital in dicionario_paises_capitais.items():
    print(f"País: {pais}, Capital: {capital}")
________________________________________________________________


# Criando um dicionário de estudantes e suas notas
estudantes = {
    'João': {'Matemática': 8.5, 'Português': 7.0, 'Ciências': 9.0},
    'Maria': {'Matemática': 9.0, 'Português': 8.0, 'Ciências': 7.5},
    'Carlos': {'Matemática': 7.0, 'Português': 6.5, 'Ciências': 8.0}
}

# Função para exibir as notas de um estudante
def exibir_notas(nome):
    if nome in estudantes:
        print(f"Notas de {nome}:")
        for materia, nota in estudantes[nome].items():
            print(f"{materia}: {nota}")
    else:
        print(f"Estudante {nome} não encontrado.")

# Função para alterar as notas de um estudante
def alterar_nota(nome, materia, nova_nota):
    if nome in estudantes:
        if materia in estudantes[nome]:
            estudantes[nome][materia] = nova_nota
            print(f"Nota de {materia} de {nome} foi alterada para {nova_nota}.")
        else:
            print(f"Matéria {materia} não encontrada.")
    else:
        print(f"Estudante {nome} não encontrado.")

# Exemplo de uso:
while True:
    print("Opções: \n1. Exibir notas \n2. Alterar nota \n3. Sair")
    opcao = input("Escolha uma opção: ")

    if opcao == '1':
        nome = input("Digite o nome do estudante: ")
        exibir_notas(nome)
    
    elif opcao == '2':
        nome = input("Digite o nome do estudante: ")
        materia = input("Digite a matéria (Matemática, Português, Ciências): ")
        nova_nota = float(input(f"Digite a nova nota para {materia}: "))
        alterar_nota(nome, materia, nova_nota)
    
    elif opcao == '3':
        print("Saindo...")
        break
    
    else:
        print("Opção inválida. Tente novamente.")
______________________________________________________________

def soma_pares(numeros):
    soma = 0
    for numero in numeros:
        if numero % 2 == 0:
            soma += numero
    return soma

# Exemplo de uso
lista = [1, 2, 3, 4, 5, 6]
resultado = soma_pares(lista)
print(f'A soma dos números pares é: {resultado}')
________________________________________________________________

def produto_mais_caro(produtos):
    if not produtos:
        return None  # Retorna None se o dicionário estiver vazio
    
    produto_max = max(produtos, key=produtos.get)
    return produto_max

# Exemplo de uso
produtos = {
    "Produto A": 50.0,
    "Produto B": 75.0,
    "Produto C": 30.0
}

resultado = produto_mais_caro(produtos)
print(f'O produto mais caro é: {resultado}')
______________________________________________________________
def multiplica_lista(lista, numero=None):
    if numero is not None:
        return [item * numero for item in lista]
    return lista

# Exemplo de uso
lista_original = [1, 2, 3, 4, 5]
resultado_com_numero = multiplica_lista(lista_original, 3)
resultado_sem_numero = multiplica_lista(lista_original)

print(f'Lista multiplicada: {resultado_com_numero}')
print(f'Lista original: {resultado_sem_numero}')
______________________________________________________________

def atualizar_estoque(estoque, produto_vendido):
    nome_produto, quantidade_vendida = produto_vendido

    if nome_produto not in estoque:
        return f'O produto "{nome_produto}" não está no estoque.'

    if quantidade_vendida > estoque[nome_produto]:
        return f'Quantidade vendida de {quantidade_vendida} excede o estoque disponível de {estoque[nome_produto]} para o produto "{nome_produto}".'

    estoque[nome_produto] -= quantidade_vendida
    return f'Venda realizada! Estoque atualizado: {estoque[nome_produto]} unidades restantes do produto "{nome_produto}".'

# Exemplo de uso
estoque = {
    "Produto A": 50,
    "Produto B": 30,
    "Produto C": 20
}

resultado = atualizar_estoque(estoque, ("Produto A", 10))
print(resultado)

resultado_excedente = atualizar_estoque(estoque, ("Produto B", 35))
print(resultado_excedente)
__________________________________________________________________________________

def calcular_medias(estudantes):
    medias = {}
    
    for estudante in estudantes:
        nome = estudante['nome']
        notas = estudante['notas']
        media = sum(notas) / len(notas) if notas else 0  # Evita divisão por zero
        medias[nome] = media
    
    return medias

# Exemplo de uso
lista_estudantes = [
    {"nome": "Alice", "notas": [7.5, 8.0, 9.0]},
    {"nome": "Bruno", "notas": [6.0, 7.5, 8.0]},
    {"nome": "Carla", "notas": []}  # Estudante sem notas
]

resultado = calcular_medias(lista_estudantes)
print(resultado)

___________________________________________________________________________
def busca_binaria_recursiva(lista, elemento, inicio, fim):
    if inicio > fim:
        return -1  # Elemento não encontrado

    meio = (inicio + fim) // 2

    if lista[meio] == elemento:
        return meio  # Elemento encontrado
    elif lista[meio] < elemento:
        return busca_binaria_recursiva(lista, elemento, meio + 1, fim)
    else:
        return busca_binaria_recursiva(lista, elemento, inicio, meio - 1)

# Função wrapper para facilitar a chamada
def buscar(lista, elemento):
    return busca_binaria_recursiva(lista, elemento, 0, len(lista) - 1)

# Exemplo de uso
lista = [1, 3, 5, 7, 9, 11, 13, 15]
elemento_procurado = 7
resultado = buscar(lista, elemento_procurado)

if resultado != -1:
    print(f'Elemento {elemento_procurado} encontrado no índice: {resultado}')
else:
    print(f'Elemento {elemento_procurado} não encontrado.')

